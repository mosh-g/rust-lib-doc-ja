initSidebarItems({"macro":[["format","Creates a `String` using interpolation of runtime expressions."],["vec","Creates a [`Vec`] containing the arguments."]],"mod":[["alloc","Memory allocation APIs"],["allocator","Use the `alloc` module instead."],["arc","Thread-safe reference-counting pointers."],["binary_heap","A priority queue implemented with a binary heap."],["borrow","A module for working with borrowed data."],["boxed","A pointer type for heap allocation."],["btree_map","A map based on a B-Tree."],["btree_set","A set based on a B-Tree."],["fmt","Utilities for formatting and printing `String`s."],["linked_list","A doubly-linked list with owned nodes."],["raw_vec",""],["rc","Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'."],["slice","連続する列への動的な大きさを持つビュー`[T]`。"],["str","Unicode string slices."],["string","A UTF-8 encoded, growable string."],["task","Types and Traits for working with asynchronous tasks."],["vec","ヒープアロケートされたデータを伴う、連続する拡張可能な配列型。`Vec<T>`と書かれます。"],["vec_deque","A double-ended queue implemented with a growable ring buffer."]]});